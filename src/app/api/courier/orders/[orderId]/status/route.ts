import { NextRequest, NextResponse } from 'next/server'
import { verifyToken } from '@/lib/auth'
import { prisma } from '@/lib/prisma'
import { sendNotification } from '@/lib/notification-manager'
import type { ApiResponse } from '@/types'
import type { OrderStatus } from '@prisma/client'
import type { NotificationRequest } from '@/lib/notification-manager'

interface RouteParams {
  params: Promise<{
    orderId: string
  }>
}

export async function PATCH(request: NextRequest, context: RouteParams) {
  const params = await context.params
  try {
    const token = request.cookies.get('auth-token')?.value

    if (!token) {
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω'
      }, { status: 401 })
    }

    const user = verifyToken(token)
    if (!user) {
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω'
      }, { status: 401 })
    }

    const body = await request.json()
    const { status, cancelComment }: { status: OrderStatus; cancelComment?: string } = body

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—É—Ä—å–µ—Ä –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const allowedStatuses: OrderStatus[] = ['COURIER_PICKED', 'ENROUTE', 'DELIVERED', 'CANCELED']
    if (!allowedStatuses.includes(status)) {
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞'
      }, { status: 400 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ —É–∫–∞–∑–∞–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    if (status === 'CANCELED' && !cancelComment?.trim()) {
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞'
      }, { status: 400 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    const existingOrder = await prisma.order.findUnique({
      where: { id: params.orderId }
    })

    if (!existingOrder) {
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'
      }, { status: 404 })
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
    const updateData: { status: OrderStatus; courierId?: string; cancelComment?: string } = { status }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    if (status === 'CANCELED' && cancelComment) {
      updateData.cancelComment = cancelComment
    }

    // –ï—Å–ª–∏ –∫—É—Ä—å–µ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–∫–∞–∑, –Ω–∞–∑–Ω–∞—á–∞–µ–º –µ–≥–æ –Ω–∞ –∑–∞–∫–∞–∑
    if (status === 'COURIER_PICKED' && !existingOrder.courierId) {
      updateData.courierId = user.id
    }

    const updatedOrder = await prisma.order.update({
      where: { id: params.orderId },
      data: updateData,
      include: {
        courier: true,
        orderItems: {
          include: {
            product: {
              include: {
                category: true,
                seller: true
              }
            }
          }
        }
      }
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
    try {
      let notificationRequest: NotificationRequest | null = null
      
      // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ COURIER_WAIT, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
      if (status === 'COURIER_WAIT' && existingOrder.status !== 'COURIER_WAIT') {
        notificationRequest = {
          orderId: params.orderId,
          type: 'NEW_ORDER'
        }
      } else {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
        notificationRequest = {
          orderId: params.orderId,
          type: 'STATUS_UPDATE',
          oldStatus: existingOrder.status
        }
      }
      
      if (notificationRequest) {
        const notificationResult = await sendNotification(request, notificationRequest)
        // console.log(`üì® –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ${params.orderId.slice(-8)}: ${notificationResult.message}`)
      }
    } catch (error) {
      // console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error)
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å
    }

    return NextResponse.json<ApiResponse>({
      success: true,
      data: updatedOrder,
      message: `–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ "${getStatusLabel(status)}"`
    })
  } catch (error) {
    // console.error('Update order status error:', error)
    return NextResponse.json<ApiResponse>({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞'
    }, { status: 500 })
  }
}

function getStatusLabel(status: OrderStatus): string {
  const labels: Record<OrderStatus, string> = {
    CREATED: '–°–æ–∑–¥–∞–Ω',
    COURIER_WAIT: '–û–∂–∏–¥–∞–µ—Ç –∫—É—Ä—å–µ—Ä–∞',
    COURIER_PICKED: '–ü—Ä–∏–Ω—è—Ç –∫—É—Ä—å–µ—Ä–æ–º',
    ENROUTE: '–í –ø—É—Ç–∏',
    DELIVERED: '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
    CANCELED: '–û—Ç–º–µ–Ω–µ–Ω'
  }
  return labels[status] || status
}

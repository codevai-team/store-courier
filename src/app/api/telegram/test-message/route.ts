import { NextRequest, NextResponse } from 'next/server'
import { getBot } from '@/lib/telegram-bot'
import { getTelegramBotToken } from '@/lib/settings'
import type { ApiResponse } from '@/types'

export async function POST(request: NextRequest) {
  try {
    console.log('üì§ API: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram...')

    const { message } = await request.json()
    
    if (!message) {
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'
      }, { status: 400 })
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    const botToken = await getTelegramBotToken()
    if (!botToken) {
      return NextResponse.json<ApiResponse>({
        success: false,
        error: 'Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
      }, { status: 500 })
    }

    // –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞
    const bot = await getBot()
    if (!bot) {
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞'
      }, { status: 500 })
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const { PrismaClient } = await import('@prisma/client')
    const prisma = new PrismaClient()
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É COURIER_CHAT_ID (JSON –æ–±—ä–µ–∫—Ç —Å –∫—É—Ä—å–µ—Ä–∞–º–∏)
      const courierChatIdSetting = await prisma.setting.findUnique({
        where: { key: 'COURIER_CHAT_ID' }
      })

      if (!courierChatIdSetting || !courierChatIdSetting.value) {
        console.log('‚ö†Ô∏è –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤ —Å Telegram, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å')
        
        // –í–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        console.log('üì§ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message)
        
        return NextResponse.json<ApiResponse>({
          success: true,
          message: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ (–Ω–µ—Ç –∫—É—Ä—å–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏)',
          data: {
            total: 0,
            success: 0,
            errors: 0,
            results: [],
            note: '–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤ —Å Telegram. –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ –≤ –∫–æ–Ω—Å–æ–ª—å.'
          }
        })
      }

      // –ü–∞—Ä—Å–∏–º JSON —Å –∫—É—Ä—å–µ—Ä–∞–º–∏
      const courierChatIds = JSON.parse(courierChatIdSetting.value)
      const courierIds = Object.keys(courierChatIds)
      
      if (courierIds.length === 0) {
        console.log('‚ö†Ô∏è JSON —Å –∫—É—Ä—å–µ—Ä–∞–º–∏ –ø—É—Å—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å')
        console.log('üì§ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message)
        
        return NextResponse.json<ApiResponse>({
          success: true,
          message: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ (–Ω–µ—Ç –∫—É—Ä—å–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏)',
          data: {
            total: 0,
            success: 0,
            errors: 0,
            results: [],
            note: 'JSON —Å –∫—É—Ä—å–µ—Ä–∞–º–∏ –ø—É—Å—Ç. –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ –≤ –∫–æ–Ω—Å–æ–ª—å.'
          }
        })
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—å–µ—Ä–∞—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const couriers = await prisma.user.findMany({
        where: {
          id: { in: courierIds },
          role: 'COURIER'
        },
        select: {
          id: true,
          fullname: true
        }
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∫—É—Ä—å–µ—Ä–∞–º
      const results = []
      for (const courier of couriers) {
        const chatId = courierChatIds[courier.id]
        
        if (!chatId) {
          console.log(`‚ö†Ô∏è –ù–µ—Ç Chat ID –¥–ª—è –∫—É—Ä—å–µ—Ä–∞ ${courier.fullname} (${courier.id})`)
          continue
        }
        
        try {
          await bot.sendMessage(chatId, message, {
            parse_mode: 'HTML'
          })
          results.push({
            courier: courier.fullname,
            courierId: courier.id,
            chatId: chatId,
            status: 'success'
          })
          console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫—É—Ä—å–µ—Ä—É ${courier.fullname} (${courier.id}) -> ${chatId}`)
        } catch (error: any) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—É—Ä—å–µ—Ä—É ${courier.fullname}:`, error)
          results.push({
            courier: courier.fullname,
            courierId: courier.id,
            chatId: chatId,
            status: 'error',
            error: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
          })
        }
      }

      const successCount = results.filter(r => r.status === 'success').length
      const errorCount = results.filter(r => r.status === 'error').length

      console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: ${successCount} —É—Å–ø–µ—à–Ω–æ, ${errorCount} –æ—à–∏–±–æ–∫`)

      return NextResponse.json<ApiResponse>({
        success: true,
        message: `–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${successCount} –∫—É—Ä—å–µ—Ä–∞–º`,
        data: {
          total: couriers.length,
          success: successCount,
          errors: errorCount,
          results
        }
      })

    } finally {
      await prisma.$disconnect()
    }

  } catch (error) {
    console.error('Test message error:', error)
    return NextResponse.json<ApiResponse>({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è'
    }, { status: 500 })
  }
}

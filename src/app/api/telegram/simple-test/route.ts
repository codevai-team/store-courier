import { NextRequest, NextResponse } from 'next/server'
import type { ApiResponse } from '@/types'

export async function POST(request: NextRequest) {
  try {
    console.log('üì§ API: –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Telegram...')

    const { message } = await request.json()
    
    if (!message) {
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'
      }, { status: 400 })
    }

    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    console.log('‚úÖ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω:', message)

    return NextResponse.json<ApiResponse>({
      success: true,
      message: `–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`,
      data: {
        receivedMessage: message,
        timestamp: new Date().toISOString()
      }
    })

  } catch (error) {
    console.error('Simple test error:', error)
    return NextResponse.json<ApiResponse>({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞'
    }, { status: 500 })
  }
}

export async function GET() {
  return NextResponse.json<ApiResponse>({
    success: true,
    message: '–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç',
    data: {
      timestamp: new Date().toISOString()
    }
  })
}

import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { sendNewOrderNotification, sendOrderStatusUpdateNotification } from '@/lib/telegram'
import type { OrderWithDetails } from '@/types'

// –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export type NotificationType = 'NEW_ORDER' | 'STATUS_UPDATE' | 'ORDER_CANCELLED'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
export interface NotificationRequest {
  orderId: string
  type: NotificationType
  oldStatus?: string
  cancelComment?: string
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
export interface NotificationResult {
  success: boolean
  message: string
  orderId: string
  type: NotificationType
  timestamp: number
  duplicate?: boolean
}

// –ö—ç—à –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (ID –∑–∞–∫–∞–∑–∞ -> timestamp)
const notificationCache = new Map<string, number>()
const NOTIFICATION_COOLDOWN = 300000 // 5 –º–∏–Ω—É—Ç cooldown –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫—ç—à–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
setInterval(() => {
  const now = Date.now()
  for (const [orderId, timestamp] of notificationCache.entries()) {
    if (now - timestamp > NOTIFICATION_COOLDOWN * 2) { // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 10 –º–∏–Ω—É—Ç
      notificationCache.delete(orderId)
      // console.log(`üßπ NotificationManager: –£–¥–∞–ª–µ–Ω –∏–∑ –∫—ç—à–∞ –∑–∞–∫–∞–∑: ${orderId.slice(-8)}`)
    }
  }
}, 600000) // 10 –º–∏–Ω—É—Ç

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function generateNotificationKey(orderId: string, type: NotificationType, oldStatus?: string): string {
  if (type === 'STATUS_UPDATE' && oldStatus) {
    return `${orderId}_${type}_${oldStatus}`
  }
  return `${orderId}_${type}`
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ cookies
function checkCookieDeduplication(request: NextRequest, notificationKey: string): boolean {
  const cookieName = `notification_${notificationKey}`
  const cookieValue = request.cookies.get(cookieName)?.value
  
  if (cookieValue) {
    const timestamp = parseInt(cookieValue)
    const now = Date.now()
    
    // –ï—Å–ª–∏ cookie —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –∏—Å—Ç–µ–∫ cooldown
    if (now - timestamp < NOTIFICATION_COOLDOWN) {
      // console.log(`üç™ NotificationManager: –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —á–µ—Ä–µ–∑ cookie –¥–ª—è ${notificationKey}`)
      return true
    }
  }
  
  return false
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ cookie —Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π
function setNotificationCookie(response: NextResponse, notificationKey: string): void {
  const cookieName = `notification_${notificationKey}`
  const timestamp = Date.now().toString()
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie –Ω–∞ 10 –º–∏–Ω—É—Ç (–≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ cooldown * 2)
  response.cookies.set(cookieName, timestamp, {
    maxAge: NOTIFICATION_COOLDOWN * 2 / 1000, // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã
    httpOnly: true,
    secure: process.env.NODE_ENV === 'production',
    sameSite: 'strict'
  })
  
  // console.log(`üç™ NotificationManager: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω cookie –¥–ª—è ${notificationKey}`)
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export async function sendNotification(
  request: NextRequest,
  notificationRequest: NotificationRequest
): Promise<NotificationResult> {
  const { orderId, type, oldStatus, cancelComment } = notificationRequest
  const notificationKey = generateNotificationKey(orderId, type, oldStatus)
  
  // console.log(`üì® NotificationManager: –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${type} –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId.slice(-8)}`)
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –∫—ç—à –≤ –ø–∞–º—è—Ç–∏
  const lastNotificationTime = notificationCache.get(notificationKey)
  if (lastNotificationTime) {
    const timeSinceLastNotification = Date.now() - lastNotificationTime
    if (timeSinceLastNotification < NOTIFICATION_COOLDOWN) {
      // console.log(`‚è∏Ô∏è NotificationManager: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è ${notificationKey} —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${Math.round(timeSinceLastNotification / 1000)} —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.`)
      return {
        success: true,
        message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ–¥–∞–≤–Ω–æ',
        orderId,
        type,
        timestamp: Date.now(),
        duplicate: true
      }
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ cookies
  if (checkCookieDeduplication(request, notificationKey)) {
    return {
      success: true,
      message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ–¥–∞–≤–Ω–æ (cookie)',
      orderId,
      type,
      timestamp: Date.now(),
      duplicate: true
    }
  }
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const order = await prisma.order.findUnique({
      where: { id: orderId },
      include: {
        courier: true,
        orderItems: {
          include: {
            product: {
              include: {
                category: true,
                seller: true
              }
            }
          }
        }
      }
    })
    
    if (!order) {
      // console.log(`‚ùå NotificationManager: –ó–∞–∫–∞–∑ ${orderId.slice(-8)} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
      return {
        success: false,
        message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω',
        orderId,
        type,
        timestamp: Date.now()
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –¥–ª—è NEW_ORDER —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if (type === 'NEW_ORDER' && order.status !== 'COURIER_WAIT') {
      // console.log(`‚ö†Ô∏è NotificationManager: –ó–∞–∫–∞–∑ ${orderId.slice(-8)} –Ω–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å COURIER_WAIT: ${order.status}`)
      return {
        success: false,
        message: '–ó–∞–∫–∞–∑ –Ω–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å COURIER_WAIT',
        orderId,
        type,
        timestamp: Date.now()
      }
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    let telegramSuccess = false
    let telegramMessage = ''
    
    try {
      if (type === 'NEW_ORDER') {
        await sendNewOrderNotification(order)
        telegramMessage = '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
      } else if (type === 'STATUS_UPDATE' && oldStatus) {
        await sendOrderStatusUpdateNotification(order, oldStatus)
        telegramMessage = '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
      } else {
        throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${type}`)
      }
      
      telegramSuccess = true
      // console.log(`‚úÖ NotificationManager: ${telegramMessage} –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId.slice(-8)}`)
    } catch (telegramError) {
      // console.error(`‚ùå NotificationManager: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId.slice(-8)}:`, telegramError)
      telegramMessage = '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º timestamp –≤ –∫—ç—à
    const timestamp = Date.now()
    notificationCache.set(notificationKey, timestamp)
    
    return {
      success: telegramSuccess,
      message: telegramMessage,
      orderId,
      type,
      timestamp
    }
    
  } catch (error) {
    // console.error(`‚ùå NotificationManager: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId.slice(-8)}:`, error)
    return {
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
      orderId,
      type,
      timestamp: Date.now()
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export async function sendBulkNotifications(
  request: NextRequest,
  notifications: NotificationRequest[]
): Promise<NotificationResult[]> {
    // console.log(`üì® NotificationManager: –û–±—Ä–∞–±–æ—Ç–∫–∞ ${notifications.length} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`)
  
  const results: NotificationResult[] = []
  
  for (const notification of notifications) {
    const result = await sendNotification(request, notification)
    results.push(result)
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
    await new Promise(resolve => setTimeout(resolve, 100))
  }
  
  const successCount = results.filter(r => r.success).length
  const duplicateCount = results.filter(r => r.duplicate).length
  
  // console.log(`üìä NotificationManager: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ - –£—Å–ø–µ—à–Ω–æ: ${successCount}, –î—É–±–ª–∏–∫–∞—Ç—ã: ${duplicateCount}, –û—à–∏–±–æ–∫: ${results.length - successCount}`)
  
  return results
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
export function getCacheStats(): { size: number; entries: Array<{ key: string; timestamp: number }> } {
  const entries = Array.from(notificationCache.entries()).map(([key, timestamp]) => ({
    key,
    timestamp
  }))
  
  return {
    size: notificationCache.size,
    entries
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
export function clearCache(): void {
  notificationCache.clear()
  // console.log('üßπ NotificationManager: –ö—ç—à –æ—á–∏—â–µ–Ω')
}
